"""
Django settings for reservation_hotel project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!7mx*5ft@=zc#7z(1e8+vp-$n0+ok2_6=s!e)438=pm2xs(3%!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_jwt',
    'drf_yasg',
    #'app_de_reservation_hotel',  
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'reservation_hotel.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'reservation_hotel.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


import datetime
JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),  # Durée de validité d'un jour
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        },
    },
}


# insertion de données dans la base SQLITE
import sqlite3

conn = sqlite3.connect('db.sqlite3')

cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS hotel (
        id INTEGER PRIMARY KEY,
        nom TEXT,
        description TEXT
    );
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS reservation (
        id INTEGER PRIMARY KEY,
        nom TEXT,
        date_arrivee DATE,
        date_depart DATE,
        numero_chambre TEXT
    );
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS chambre (
        id INTEGER PRIMARY KEY,
        numero TEXT,
        nom_hotel TEXT,
        type TEXT
    );
''')

cursor.execute(f'DELETE FROM hotel')
cursor.execute(f'DELETE FROM reservation')
cursor.execute(f'DELETE FROM chambre')

cursor.execute("INSERT INTO hotel (nom, description) VALUES (?, ?)", ('Hotel luxe 1', 'Hotel au plein centre de la ville de Paris avec chambres luxueuses, salles de réunions et service voiturier'))
cursor.execute("INSERT INTO hotel (nom, description) VALUES (?, ?)", ('Hotel luxe 2', 'Hotel sur la cote de la ville de Nice avec chambres luxueuses, SPAs et terrains de sports'))

cursor.execute("INSERT INTO reservation (nom, date_arrivee, date_depart, numero_chambre) VALUES (?, ?, ?, ?)", ('Doe', '2023-10-25', '2023-10-30', '101'))
cursor.execute("INSERT INTO reservation (nom, date_arrivee, date_depart, numero_chambre) VALUES (?, ?, ?, ?)", ('Fresne', '2023-10-25', '2023-10-30', '103'))

cursor.execute("INSERT INTO chambre (numero, type, nom_hotel) VALUES (?, ?, ?)", ('101', 'duo', 'Hotel luxe 1'))
cursor.execute("INSERT INTO chambre (numero, type, nom_hotel) VALUES (?, ?, ?)", ('102', 'duo', 'Hotel luxe 1'))
cursor.execute("INSERT INTO chambre (numero, type, nom_hotel) VALUES (?, ?, ?)", ('103', 'solo', 'Hotel luxe 1'))
cursor.execute("INSERT INTO chambre (numero, type, nom_hotel) VALUES (?, ?, ?)", ('201', 'duo', 'Hotel luxe 1'))
cursor.execute("INSERT INTO chambre (numero, type, nom_hotel) VALUES (?, ?, ?)", ('202', 'duo', 'Hotel luxe 1'))
cursor.execute("INSERT INTO chambre (numero, type, nom_hotel) VALUES (?, ?, ?)", ('203', 'suite', 'Hotel luxe 1'))

conn.commit()
conn.close()


